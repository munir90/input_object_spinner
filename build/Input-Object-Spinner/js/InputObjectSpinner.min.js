/**
 * Author and copyright: Munir Tariq
 * Repository: https://github.com/munir90/input_object_spinner.git
 * License: 
 */

; (function ($) {
    "use strict"

    var originalVal = $.fn.val
    $.fn.val = function (value) {
        if (arguments.length >= 1) {
            if (this[0] && this[0]["input-object-spinner"] && this[0].setValue) {
                var element = this[0]
                setTimeout(function () {
                    element.setValue(value)
                })
            }
        }
        return originalVal.apply(this, arguments)
    }

    $.fn.InputObjectSpinner = $.fn.InputObjectSpinner = function (action, options) {

        if (action == "getSelectedData") {
            return this.data('selected_data');
        }

        if (action == "getSelectedValue") {
            return this.data('selected_data').value;
        }

        if (action == "getData") {
            return this.data('data');
        }

        if (action == "isInputObjectSpinner") {
            if (((this[0]["input-object-spinner"]) && (this[0]["input-object-spinner"] === true))) {
                return true;
            } else {
                return false;
            }
        }

        let current_timestamp = Date.now();
        let inputName = this.attr("name");

        var html = `
            <div class="input-group inputObjectSpinner ` + inputName + `">
                <div class="input-group-append">
                    <button class="btn btn-` + options.sizing + ` btn-outline-secondary btn-append fas fa-angle-up" data-step="next" type="button" id="button-append-` + inputName + `-` + current_timestamp + `">
                    </button>
                </div>
                <input type="text" data-ignore="true" class="form-control form-control-` + options.sizing + ` text-white" placeholder="" id="` + inputName + `-` + current_timestamp + `">
                <div class="input-group-prepend">
                    <button class="btn btn-` + options.sizing + ` btn-outline-secondary btn-prepend fas fa-angle-down" data-step="previous" type="button" id="button-prepend-` + inputName + `-` + current_timestamp + `">
                    </button>
                </div>
            </div>
        `;

        this.each(function () {

            var $original = $(this);
            $original[0]["input-object-spinner"] = true;
            $original.hide();

            // if (action == "resetToDefault") {
            //     resetDefault();
            //     console.log("resetToDefault");

            //     return true;
            // }

            var name = $original.attr("name");

            var curr_value = null;

            var $inputGroup = $(html)
            var $buttonDecrement = $inputGroup.find(".btn-prepend")
            var $buttonIncrement = $inputGroup.find(".btn-append")
            var $input = $inputGroup.find("input");

            var data = options.data;

            $original.data('data', data);

            var _default_index = (data.findIndex(x => x.default === true)) || 0;
            var selected_index = _default_index || 0;
            var selected = data[selected_index];

            $original.after($inputGroup)

            onPointerUp($buttonDecrement[0], function (e) {
                var $targetElement = e.target || e.srcElement;
                var $stepId = $($targetElement).attr("data-step")

                if ($stepId == "previous") {
                    getPreviousItem(e)
                } else {

                }
            })

            onPointerUp($buttonIncrement[0], function (e) {
                var $targetElement = e.target || e.srcElement;
                var $stepId = $($targetElement).attr("data-step")

                if ($stepId == "next") {
                    getNextItem(e)
                } else {

                }
            })

            function getNextItem(e) {
                if (selected_index == (data.length - 1)) {
                    selected_index = 0;
                } else {
                    selected_index++;
                }

                updateSelectedItem(e);
            }

            function getPreviousItem(e) {
                if (selected_index == 0) {
                    selected_index = (data.length - 1);
                } else {
                    selected_index--;
                }

                updateSelectedItem(e);
            }

            function updateSelectedItem(e) {
                selected = data[selected_index];

                $original.data('selected_index', selected_index);
                $original.data('selected_data', selected);

                $original.val(selected.value).trigger("change");

                renderSelected(e);
            }

            function renderSelected(e) {
                var $targetElement = null;

                if (e != null) {
                    $targetElement = e.target || e.srcElement;
                } else {
                    $targetElement = $original.parent().children("." + name);
                }

                var parentElement = $($targetElement).closest("." + name);

                let classesToRemove = "";
                data.forEach(option => {
                    classesToRemove += " " + option.color_class;
                });

                parentElement.children(`#` + name + `-` + current_timestamp).val(selected.text)
                parentElement.children(`#` + name + `-` + current_timestamp).removeClass(classesToRemove).addClass(selected.color_class);
            }

            function onPointerUp(element, callback) {
                element.addEventListener("mouseup", function (e) {
                    callback(e)
                })
                // element.addEventListener("touchend", function (e) {
                //     callback(e)
                // })
                element.addEventListener("keyup", function (e) {
                    if ((e.keyCode === 32 || e.keyCode === 13)) {
                        triggerKeyPressed = false
                        callback(e)
                    }
                })
            }

            this.resetDefault = function () {
                selected_index = _default_index;

                updateSelectedItem(null);
            }

            this.setInputObjectValue = function (value) {
                selected_index = (data.findIndex(x => x.value === value)) || _default_index;

                updateSelectedItem(null);
            }

            updateSelectedItem(null);
        });

        return this;
    };
}(jQuery))